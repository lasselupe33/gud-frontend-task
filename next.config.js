export default withLinaria({
  reactStrictMode: true,
  experimental: {
    scrollRestoration: true,
  },
});

/**
 * heavily inspired by https://github.com/Mistereo/next-linaria/
 *
 * but fixes a few issues, e.g. opts for a direct integration with
 * @wyw-in-js/webpack-loader to reduce risks of npm audit finding security issues
 * in outdated versions of webpack related tooling.
 *
 * further, we've cleaned up the integration slightly to make the traversal of
 * existing rules easier to understand and modify as needed in the future
 */

const LINARIA_EXTENSION = ".linaria.module.css";

/**
 *
 * @param [nextConfig] {import('next').NextConfig}
 * @returns {import('next').NextConfig}
 */
function withLinaria(nextConfig = {}) {
  return {
    ...nextConfig,
    webpack(config, options) {
      // traverse all rules within the default next.js configuration, and adjust
      // the css-loader to enable support for linaria (we need to ensure that
      // css modules are applied in a way that doesn't maipulate the output
      // created by linaria)
      traverseWebpackRules(config.module.rules, (rule) => {
        if (
          typeof rule.loader !== "string" ||
          !rule.loader.includes("css-loader")
        ) {
          // ignore all rules not related to CSS
          return;
        }

        if (!rule.options || !rule.options.modules) {
          // ignore rules if CSS moduels hasn't been configured
          return;
        }

        const default_getLocalIdent = rule.options.modules.getLocalIdent;

        // configure output to be compatible with both next.js defaults and
        // linaria
        //
        // @see https://github.com/Mistereo/next-linaria/
        rule.options.modules.mode = "local";
        rule.options.modules.auto = true;
        rule.options.modules.exportGlobals = true;
        rule.options.modules.exportOnlyLocals = false;

        // override the getLocalIdent to be compatible with linaria for the
        // output files created
        rule.options.modules.getLocalIdent = (
          context,
          _,
          exportName,
          options,
        ) => {
          if (context.resourcePath.includes(LINARIA_EXTENSION)) {
            // for css generated by linaria, use the exportName as the
            // localIdent, as:
            //
            // 1) linaria has already generated uniquely scoped class names, and
            // 2) linaria assumes this to be the case, when generating JS output
            return exportName;
          }

          // ... otherwise fall back to using the default getLocalIdent for all
          // other processed CSS files, to avoid breaking integrations with
          // other next.js based integrations
          return default_getLocalIdent(context, _, exportName, options);
        };
      });

      // push the @wyw-in-js/webpack-loader to the configuration, so that we get
      // automatic extraction of css from within JS files
      config.module.rules.push({
        test: /\.(tsx|ts|js|mjs|jsx)$/,
        exclude: /node_modules|libs\/[^/]\/lib/,
        use: [
          {
            loader: "@wyw-in-js/webpack-loader",
            options: {
              sourceMap: process.env.NODE_ENV !== "production",
              ...(nextConfig.linaria || {}),
              extension: LINARIA_EXTENSION,
            },
          },
        ],
      });

      if (typeof nextConfig.webpack === "function") {
        return nextConfig.webpack(config, options);
      }

      return config;
    },
  };
}

/**
 * utility to traverse through and visit all rules within a webpack config
 * recursively
 */
function traverseWebpackRules(rules, visitor) {
  rules.forEach((rule) => {
    visitor(rule);

    // recursively keep on traversing all nested rules within the configuration
    //
    // @see https://github.com/Mistereo/next-linaria/
    if (typeof rule.use === "object" && rule.use) {
      traverseWebpackRules(
        Array.isArray(rule.use) ? rule.use : [rule.use],
        visitor,
      );
    }
    if (Array.isArray(rule.oneOf)) {
      traverseWebpackRules(rule.oneOf, visitor);
    }
  });
}
